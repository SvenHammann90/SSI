theory didcomm_did_exchange
/* We model a peer-DID exchange (*) and following message. 
We model a peer DID more precisely as being generated from the hash of the initial DID Document,
see: https://dhh1128.github.io/peer-did-method-spec/index.html#namestring-generation-method
We model the generation as an abstract function. In this model, the DID Doc just consists of single public key.

(*) According to https://github.com/hyperledger/aries-rfcs/blob/master/features/0023-did-exchange/README.md

This model does NOT satisfy any security guarantees.
The reason is that the invite happens over an insecure channel, so it could have come from the attacker.
A and B have no way to verify that they are talking to each other.
==>
While not surprising, this shows that, to gain any security guarantees,
A and B MUST have some way of verifying who is on the other end of the connection:
- either through verifiable credentials
or
- through out-of-band verification of each other's DIDs
(e.g., check the displayed DIDs on each other's device).

These will be explored in follow-up theories.
*/



begin

builtins: signing, asymmetric-encryption

/* auth_encrypt and auth_decrypt model authCrypt, an authenticated, but repudiable encryption
Encrypting requires the receiver's public key, and additionally the *sender's private key*
Decrypting requires the receiver's private key, and additionally the *sender's public key*
See https://github.com/hyperledger/aries-rfcs/tree/03a74a813e9e4f32d969ae4c37a0b3bb538c28c8/features/0019-encryption-envelope
Note that we abstract away from the encrypted cek, which then encrypts the plaintext; this only affects efficiency, but not security.

We model anonCrypt with Tamarin's built-in asymmetric encryption function aenc.
*/

functions: auth_encrypt/3, auth_decrypt/3, auth_verify/3, true/0, did_generate/1

equations: auth_decrypt(auth_encrypt(msg, sender_sk, pk(receiver_sk)), pk(sender_sk), receiver_sk) = msg,
auth_verify(auth_encrypt(msg, sender_sk, pk(receiver_sk)), pk(sender_sk), receiver_sk) = true



/* Let us call the inviter $A and the invitee $B.
$A and $B are public names uniquely identifying agents.

We assume that peer-DIDs are only generated when needed,
i.e., $A only generates their A-B-peer-DID when responding,
not yet when sending the invite. 

We also assume that channels are insecure unless explicitly stated otherwise in the specification.
*/


rule a_send_invitation:
[Fr(~recipientSkA)]
-->
[Out(<'Invitation', $A, $B, pk(~recipientSkA)>), Inviter_St_invited($A, ~recipientSkA, $B)]

rule b_receive_invitation:
[In(<'Invitation', $A, $B, recipientPkA>)]
-->
[Invitee_St_invited($B, recipientPkA, $A)]

rule b_generate_did_and_send_exchange_request:
let pkB = pk(~skB)
    didB = did_generate(pkB) in
[Invitee_St_invited($B, recipientPkA, $A), Fr(~skB)]
-->
[Out(aenc(<'ExchangeRequest', $B, $A, <'connection', didB, pkB> >, recipientPkA)), Invitee_St_requested($B, recipientPkA, $A, ~skB, didB, pkB)]

rule a_receive_exchange_request:
[Inviter_St_invited($A, ~recipientSkA, $B), In(aenc(<'ExchangeRequest', $B, $A, <'connection', didB, pkB> >, pk(~recipientSkA) ))]
-->
[Inviter_St_requested($A, ~recipientSkA, $B, didB, pkB)]

rule a_generate_did_and_send_exchange_response:
let pkA = pk(~skA)
    didA = did_generate(pkA)
    connectionA = <didA, pkA> in
[Inviter_St_requested($A, ~recipientSkA, $B, didB, pkB), Fr(~skA)]
--[SendExchangeResponse()]->
/* From the spec:
The message should be packaged in the encrypted envelope format, using the keys from the request, and the new keys presented in the internal did doc.
We interpret this to mean authCrypt with [keys from the request = receiver keys] [new keys = sender keys]. */
[Out(<'ExchangeRequest', aenc(pkA, pkB), auth_encrypt(<connectionA, sign(connectionA, ~recipientSkA)> , ~skA, pkB) >), Inviter_St_responded($A, $B, didB, pkB, didA, ~skA)]

rule b_receive_exchange_response:
let pkSender = adec(aencPkSender, ~skB)
    decryptedMsg = auth_decrypt(authEncMsg, pkSender, ~skB)
    connectionA = fst(decryptedMsg)
    signatureConnectionA = snd(decryptedMsg)
    didA = fst(connectionA)
    pkA = snd(connectionA)
    decryptionSuccessful = auth_verify(authEncMsg, pkA, ~skB) in
[Invitee_St_requested($B, recipientPkA, $A, ~skB, didB, pkB), In(<'ExchangeRequest', aencPkSender, authEncMsg>)]
--[ReceiveExchangeResponse(), MustBeTrue(decryptionSuccessful), MustBeEqual(pkSender, pkA), MustBeTrue(verify(signatureConnectionA, connectionA, recipientPkA))]->
[Invitee_St_responded($B, $A, ~skB, didB, pkB, didA, pkA), Invitee_DID_Displays($B, didB, didA)]

rule b_send_authcrypt_msg_to_a:
[Invitee_St_responded($B, $A, ~skB, didB, pkB, didA, pkA), Fr(~msg)]
--[Running($B, $A, ~msg)]->
[Out(<'DIDComm_Message', aenc(pk(~skB), pkA), auth_encrypt(~msg, ~skB, pkA)>)]


rule a_receive_authcrypt_msg_from_b:
let pkSender = adec(aencPkSender, ~skA)
    decryptedMsg = auth_decrypt(authEncMsg, pkSender, ~skA)
    decryptionSuccessful = auth_verify(authEncMsg, pkSender, ~skA) in
[In(<'DIDComm_Message', aencPkSender, authEncMsg>), Inviter_St_responded($A, $B, didB, pkB, didA, ~skA)]
--[MustBeTrue(decryptionSuccessful), MustBeEqual(pkSender, pkB), Secret(decryptedMsg), Commit($B, $A, decryptedMsg), Finish()]->
[]


// This restriction is used for the check for successful encryption
restriction checks:
    "All x #i. MustBeTrue(x) @ #i ==> x = true"


restriction equality:
    "All x y #i. MustBeEqual(x, y) @ #i ==> x = y"

// This lemma ensures the protocol is executable (there are no obvious mistakes)
lemma executable:
exists-trace
" Ex #i. Finish() @ #i"


// These lemmas give semantics to the security claims made in the protocol

lemma secrecy:
" All msg #i. Secret(msg) @ #i ==> not Ex #j. K(msg) @ j"

lemma agreement:
" All b a msg #i. Commit(b, a, msg) @ i ==> Ex #j. Running(b, a, msg) @ j & #j < #i"



end
















